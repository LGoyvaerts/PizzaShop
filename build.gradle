apply plugin: 'war'
group 'ch.ti8m.apprentice.pizzashop'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main { output.resourcesDir = output.classesDir }
    test { output.resourcesDir = output.classesDir }
}
jar { duplicatesStrategy = 'exclude' }

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
def buildDate = java.time.LocalDateTime.now()

jar {
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

war {
    archiveName 'pizzashop.war'
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

ext.libraries = [
        testbase   : [
                "junit:junit:4.12",
                "org.mockito:mockito-core:2.4.1"
        ],
        loggingAPI : [
                "org.slf4j:slf4j-api:1.7.22"
        ],
        loggingImpl: [
                "org.slf4j:jcl-over-slf4j:1.7.22",
                "org.slf4j:jul-to-slf4j:1.7.22",
                "ch.qos.logback:logback-classic:1.1.8"
        ],
        jee        : "javax:javaee-api:7.0",
        junit      : "junit:junit:4.12",
        mockito    : "org.mockito:mockito-core:2.3.0",
        jaxb       : [
                "com.fasterxml.jackson.core:jackson-databind:2.8.5",
                "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.8.5"
        ],
        jaxrs      : [
                "javax.ws.rs:javax.ws.rs-api:2.0.1",
                "org.glassfish:javax.json:1.1",
                "org.glassfish.jersey.containers:jersey-container-servlet:2.25",
                "org.glassfish.jersey.media:jersey-media-json-jackson:2.25"
        ],
        jersey:[
                'org.glassfish.jersey.core:2.6'
        ]
]


dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    providedCompile libraries.jee
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.14'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.44' //6.0.5
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.14'
    compile group: 'com.sun.jersey', name: 'jersey-client', version: '1.9.1'
    compile libraries.jaxrs
    compile libraries.jaxb
    testCompile libraries.testbase
    testCompile libraries.junit
    testCompile libraries.mockito
    compile libraries.loggingAPI
    compile libraries.loggingImpl
}

test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test) {
    include '**/*IntegrationTest*'
    doFirst {
        jettyRun.httpPort = 8080    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.stopPort = 8091   // Port for stop signal
        jettyStop.stopKey = 'stopKey'
        jettyStop.execute()
    }
}